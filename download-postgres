#!/bin/bash

readonly REMOTESERVER=atlas
readonly ENVIRONMENT=production

# A simple bash script to download a PostgreSQL database from the remote
# VPC and automatically restore it locally for development.
# Created by Michiel Verkoijen on 2016-10-27.
# Filename: ~/.bin/download-postgres

echo "Download a $ENVIRONMENT PostgreSQL database and restore it on the local machine."

# Check if a database is specified on the command prompt.
if [ "$#" == "0" ]; then
  echo "`tput setaf 1`Warning: No database name specified.`tput setaf 7`"
  tput op
  echo "Usage: download-postgres <FILENAME>"
  echo "For example: download-postgres sitename_nl"
  exit 1
fi

# Check if the remote server can be reached.
if ping -c1 -W1 $REMOTESERVER &> /dev/null; then
    echo "`tput setaf 2`Remote server ($REMOTESERVER) can be reached`tput setaf 7`"
    tput op
else
    echo "`tput setaf 1`Warning: production server ($REMOTESERVER) cannot be reached`tput setaf 7`"
    tput op
    echo "Maybe your internet connection is down or you have not connected to the VPN."
    echo "Script terminated prematurely!"
    exit;
fi

# Create a new local database.
# Also allow the user to quit if it already exists.
psql postgres --command "CREATE DATABASE $1_development ;" &> /dev/null
if [[ $? > 0 ]]; then
  echo "Local PostgreSQL database $1_development probably already exists."
  read -p "Are you sure you wish to overwrite your local database? " -n 1
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    echo "Database not restored."
    exit 1
  else
    echo ""
    echo "Flushing activity, dropping and recreating $1_development..."
    psql postgres --command "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname ='$1_development';"
    psql postgres --command "DROP DATABASE $1_development ;"
    psql postgres --command "CREATE DATABASE $1_development ;"
  fi
else
  echo "New database $1_development created."
fi

# Setup the right roles.
psql postgres --command "CREATE ROLE $1 LOGIN;" &> /dev/null
if [[ $? > 0 ]]; then
  echo ""
else
  echo "Created new role $1."
fi

# Create a database dump on the remote server.
echo "Connecting to $REMOTESERVER to create a database dump..."
ssh $REMOTESERVER "sudo -u postgres pg_dump -U postgres $1_$ENVIRONMENT | gzip --fast" > ~/$1_$ENVIRONMENT.sql.gz
if [[ $? > 0 ]]; then
   echo "`tput setaf 1`Remote PostgreSQL dump failed somehow. Script stopped.`tput setaf 7`"
   tput op
   exit
fi

# Finally restore the database if all has gone well.
echo "Restoring $1_development database..."
gunzip < ~/$1_$ENVIRONMENT.sql.gz | psql --quiet $1_development
echo "Completed."
